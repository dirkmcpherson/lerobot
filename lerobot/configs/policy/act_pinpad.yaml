# @package _global_

seed: 1000
dataset_repo_id: pinpad

training:
  offline_steps: 200000
  online_steps: 0
  eval_freq: 10000
  save_freq: 100000
  log_freq: 250
  save_model: true

  batch_size: 32
  lr: 1e-5
  lr_backbone: 1e-5
  weight_decay: 1e-4
  grad_clip_norm: 10
  online_steps_between_rollouts: 1

  override_dataset_stats:
    # stats from imagenet, since we use a pretrained vision model
    observation.image:
      mean: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
      std: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
  
  delta_timestamps:
    action: "[i / ${fps} for i in range(${policy.chunk_size})]"

eval:
  n_episodes: 10
  batch_size: 3

# See `configuration_act.py` for more details.
policy:
  name: act

  # Input / output structure.
  n_obs_steps: 1
  chunk_size: 32 # chunk_size
  n_action_steps: 31

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.image: [3, 64, 64]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.image: mean_std
  output_normalization_modes:
    action: "none"

  # Architecture.
  # Vision backbone.
  vision_backbone: resnet18
  pretrained_backbone_weights: ResNet18_Weights.IMAGENET1K_V1
  replace_final_stride_with_dilation: false
  # Transformer layers.
  pre_norm: false
  dim_model: 512
  n_heads: 8
  dim_feedforward: 3200
  feedforward_activation: relu
  n_encoder_layers: 4
  n_decoder_layers: 1
  # VAE.
  use_vae: False
  latent_dim: 32
  n_vae_encoder_layers: 4

  # Inference.
  use_temporal_aggregation: false

  # Training and loss computation.
  dropout: 0.1
  kl_weight: 10.0
